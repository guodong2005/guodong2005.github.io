<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>qwq</title>
    <link href="/2021/07/13/qwq/"/>
    <url>/2021/07/13/qwq/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2021/07/13/test/"/>
    <url>/2021/07/13/test/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><script type="math/tex; mode=display">2</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//&#123;&#123;&#123; template</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// #define int long long </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span><br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>], *p1 = buf, *p2 = buf;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> tmp=<span class="hljs-built_in">getchar</span>();<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(tmp))&#123;<br><span class="hljs-keyword">if</span>(tmp == <span class="hljs-string">&#x27;-&#x27;</span>) flag = <span class="hljs-number">-1</span>;<br>tmp = <span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(tmp))&#123;<br>ans = ans * <span class="hljs-number">10</span> + tmp - <span class="hljs-string">&#x27;0&#x27;</span>;<br>tmp = <span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">return</span> ans * flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span>&#123;x=<span class="hljs-built_in">gi</span>();&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y)</span></span>&#123;<span class="hljs-built_in">in</span>(x),<span class="hljs-built_in">in</span>(y);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y,<span class="hljs-keyword">int</span> &amp;z)</span></span>&#123;<span class="hljs-built_in">in</span>(x),<span class="hljs-built_in">in</span>(y),<span class="hljs-built_in">in</span>(z);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in4</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> &amp;y,<span class="hljs-keyword">int</span> &amp;z,<span class="hljs-keyword">int</span> &amp;a)</span></span>&#123;<span class="hljs-built_in">in3</span>(x,y,z),<span class="hljs-built_in">in</span>(a);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> y)</span></span>&#123;x=<span class="hljs-built_in">max</span>(x,y);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> y)</span></span>&#123;x=<span class="hljs-built_in">min</span>(x,y);&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM(arr,v) memset(arr,v,sizeof arr)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> clr(f,n) memset(f,0,sizeof(int)*(n))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COPY(arr,goal) memcpy(arr,goal,sizeof goal)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> For(i,a,b) for(int i=(int)(a);i&lt;=(int)(b);++i)</span><br><span class="hljs-comment">// &#125;&#125;&#125;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1002000</span>, mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> p = mod - <span class="hljs-number">2</span>)</span></span>&#123;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(p)&#123;<br><span class="hljs-keyword">if</span>(p &amp; <span class="hljs-number">1</span>)<br>ans = <span class="hljs-number">1ll</span> * ans * b % mod;<br>b = <span class="hljs-number">1ll</span> * b * b % mod;<br>p &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;<br><span class="hljs-keyword">while</span>(x &gt;= mod)<br>x -= mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">px</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A,<span class="hljs-keyword">int</span> *B,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,len) <br>A[i] = <span class="hljs-number">1ll</span> * A[i] * B[i] % mod;<br>&#125;<br><span class="hljs-comment">// &#123;&#123;&#123; ntt part</span><br><span class="hljs-keyword">int</span> Rev[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tpre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;n)</span></span>&#123;<br><span class="hljs-keyword">int</span> limit = <span class="hljs-number">1</span>,l = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(limit &lt; n)<br>limit&lt;&lt;=<span class="hljs-number">1</span>,++l;<br><span class="hljs-comment">//     tr[i]=(tr[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)?n&gt;&gt;1:0);</span><br>n = limit;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,limit<span class="hljs-number">-1</span>)<br>Rev[i] = (Rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>) | ((i&amp;<span class="hljs-number">1</span>) &lt;&lt; (l<span class="hljs-number">-1</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;n)</span></span>&#123;<br><span class="hljs-keyword">int</span> limit =  <span class="hljs-number">1</span>,cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(limit &lt; n) limit &lt;&lt;= <span class="hljs-number">1</span>,++cnt;<br>n = limit;<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,limit<span class="hljs-number">-1</span>)<br>Rev[i] = (Rev[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>) | ((i&amp;<span class="hljs-number">1</span>) &lt;&lt; (cnt - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ntt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A,<span class="hljs-keyword">int</span> len,<span class="hljs-keyword">int</span> opt)</span></span>&#123;<br><span class="hljs-built_in">init</span>(len);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,len - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> (i &lt; Rev[i]) <br><span class="hljs-built_in">swap</span>(A[i],A[Rev[i]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> ; i &lt;= len ; i &lt;&lt;= <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> m = i &gt;&gt; <span class="hljs-number">1</span>,  wn = <span class="hljs-built_in">Pow</span>(<span class="hljs-number">3</span>,opt == <span class="hljs-number">1</span> ? (mod<span class="hljs-number">-1</span>)/i : mod - <span class="hljs-number">1</span> - (mod<span class="hljs-number">-1</span>)/i);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span> ; j &lt; len ; j += i)&#123;<br><span class="hljs-keyword">int</span> w = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; m; ++k,w = <span class="hljs-number">1ll</span> * w * wn % mod)&#123;<br><span class="hljs-keyword">int</span> x = A[j + k] , y = <span class="hljs-number">1ll</span> * w * A[j + k + m] % mod;<br><span class="hljs-built_in">Mod</span>(A[j + k] = x + y);<br><span class="hljs-built_in">Mod</span>(A[j + k + m] = x - y + mod);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(opt == <span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">int</span> inv = <span class="hljs-built_in">Pow</span>(len);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,len - <span class="hljs-number">1</span>)<br>A[i] = <span class="hljs-number">1ll</span> * inv * A[i] % mod;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">times</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A,<span class="hljs-keyword">int</span> *B,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sav[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-built_in">init</span>(len);<br><span class="hljs-built_in">clr</span>(sav,len);<br><span class="hljs-built_in">memcpy</span>(sav,B,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * len);<br><span class="hljs-comment">// For(i,0,len) sav[i] = B[i];</span><br><span class="hljs-built_in">Ntt</span>(A,len,<span class="hljs-number">1</span>);<span class="hljs-built_in">Ntt</span>(sav,len,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">px</span>(A,sav,len);<br><span class="hljs-built_in">Ntt</span>(A,len,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-comment">// &#125;&#125;&#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetInv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A,<span class="hljs-keyword">int</span> *B,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><br>&#125;<br><span class="hljs-keyword">int</span> A[N],B[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>b[<span class="hljs-number">0</span>]=<span class="hljs-built_in">Pow</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sav[N];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k &lt;&lt;= <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">int</span> lim = k &lt;&lt; <span class="hljs-number">2</span>;<br><span class="hljs-built_in">init</span>(lim);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,(k&lt;&lt;<span class="hljs-number">1</span>) - <span class="hljs-number">1</span>)<br>sav[i] = a[i];<br><span class="hljs-built_in">Ntt</span>(sav,k&lt;&lt;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">Ntt</span>(b,k&lt;&lt;<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,(k&lt;&lt;<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>) <br>b[i] = <span class="hljs-number">1ll</span> * b[i] * (<span class="hljs-number">2</span> - <span class="hljs-number">1ll</span> * sav[i] * b[i] % mod + mod)% mod;<br><span class="hljs-built_in">Ntt</span>(b,k&lt;&lt;<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">For</span>(i,k&lt;&lt;<span class="hljs-number">1</span>,(k&lt;&lt;<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>) b[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> C[N],D[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> DMYTXDY</span><br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>) C[i] = <span class="hljs-built_in">gi</span>();<br><span class="hljs-built_in">Inv</span>(C,D,n);<br><span class="hljs-built_in">For</span>(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,D[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * int n,m;in2(n,m);</span><br><span class="hljs-comment"> * For(i,0,n) A[i] = gi();</span><br><span class="hljs-comment"> * For(i,0,m) B[i] = gi();</span><br><span class="hljs-comment"> * times(A,B,n+m+1); // sizeof 吞位</span><br><span class="hljs-comment"> * For(i,0,n + m)</span><br><span class="hljs-comment"> *         printf(&quot;%d &quot;,A[i]);</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>test1</tag>
      
      <tag>test2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/13/hello-world/"/>
    <url>/2021/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
